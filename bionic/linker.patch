diff --git a/linker/linker.cpp b/linker/linker.cpp
index bc40cf1..899eeca 100644
--- a/linker/linker.cpp
+++ b/linker/linker.cpp
@@ -2936,8 +2936,8 @@ bool soinfo::prelink_image() {
 
       default:
         if (!relocating_linker) {
-          DL_WARN("%s: unused DT entry: type %p arg %p", get_realpath(),
-              reinterpret_cast<void*>(d->d_tag), reinterpret_cast<void*>(d->d_un.d_val));
+          //DL_WARN("%s: unused DT entry: type %p arg %p", get_realpath(),
+          //    reinterpret_cast<void*>(d->d_tag), reinterpret_cast<void*>(d->d_un.d_val));
         }
         break;
     }
@@ -3023,8 +3023,8 @@ bool soinfo::link_image(const soinfo_list_t& global_group, const soinfo_list_t&
 #endif
     // Make segments writable to allow text relocations to work properly. We will later call
     // phdr_table_protect_segments() after all of them are applied and all constructors are run.
-    DL_WARN("%s has text relocations. This is wasting memory and prevents "
-            "security hardening. Please fix.", get_realpath());
+    //DL_WARN("%s has text relocations. This is wasting memory and prevents "
+    //        "security hardening. Please fix.", get_realpath());
     if (phdr_table_unprotect_segments(phdr, phnum, load_bias) < 0) {
       DL_ERR("can't unprotect loadable segments for \"%s\": %s",
              get_realpath(), strerror(errno));
